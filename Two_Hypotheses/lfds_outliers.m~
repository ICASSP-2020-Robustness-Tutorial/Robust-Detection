function [Q, llr, c, nit] = lfds_outliers(P, dx, eps, varargin)
% Get least favourable densities for two hypotheses under density band uncertainty
% For details see:
%
% M. Fauß and A. M. Zoubir, "Old Bands, New Tracks—Revisiting the Band Model for Robust Hypothesis
% Testing," in IEEE Transactions on Signal Processing, vol. 64, no. 22, pp. 5875-5886, 15 Nov.15, 2016.
%
% INPUT
%   P:              nominal densities, 2xK matrix
%   dx:             grid size for numerical integraton 
%
% varargin
% | {1}:            regularization parameter, defaults to 0.0
% | {2}:            initial guess for Q, defaults to weighted sum of lower
%                   and upper bound  
% | {3}:            tolerance of fixed-point in terms of sup-norm, defaults to 1e-6
% | {4}:            maximum number of iterations, defaults to 100
% | {5}:            order of vector norm used for convergence criterion, defaults to Inf   
%
% OUTPUT
%   Q:              least favorable densities
%   llr:            log-likelihood ratio of q1 and q0, log(q1/q0)
%   c:              clipping constants c0, c1
%   nit:            number of iterations

% Get least favourable densities for two hypotheses under epsilon contamination
% uncertainty as a specail case of band uncertainty.
% 
% INPUT
%      P:              nominal densities, 2xK matrix
%      dx:             grid size for numerical integraton
%      eps:            outlier ratio, can be a scalar or a vector
% 
% OUTPUT
%      Q:              least favorable densities
%      llr:            log-likelihood ratio of q1 and q0, log(q1/q0)
%      c:              clipping constants c0, c1
%      nit:            number of iterations

% add path to helper functions
addpath ../Helper_Functions

% default values
alpha = 0.0;
Q_init = NaN;
tol = 1e-6;
itmax = 100;
order = Inf;
c0 = 1; c1 = 1;

% sanity checks
if ~is_valid_density_band(P_min, P_max, dx)
    error("Invalid density bands.");
end

% user defined alpha
if nargin >= 4 && ~isempty(varargin{1})
    arg = varargin{1};
    if is_nonnegative_scalar(arg)
        alpha = arg;
    else
        error("'alpha' must be a nonnegative scalar.");
    end
end

% user defined Q
if nargin >= 5 && ~isempty(varargin{2})
    Q_init = varargin{2};
end

% user defined number of iterations
if nargin >= 6 && ~isempty(varargin{3})
    if varargin{3} > 0
        itmax = varargin{3};
    else
        error('Maximum number of iterations must be a positive scalar.');
    end
end

% user defined tolerance
if nargin >= 7 && ~isempty(varargin{4})
    if varargin{4} > 0
        tol = varargin{4};
    else
        error('Tolerance must be a positive scalar.');
    end
end

% user defined vector norm
if nargin >= 8 && ~isempty(varargin{5})
    order = varargin{5};
end

% initialize lfds
Q = set_densities(Q_init, P_min, P_max, dx);

% initialize bands corresponding to outlier model
p_min(1, :) = (1-eps(1)) * p0;
p_min(2, :) = (1-eps(2)) * p1;
p_max(1, :) = ones(1, K)/dx;
p_max(2, :) = ones(1, K)/dx;

% solve via density band algorithm
[q0, q1, llr, c] = lfds_density_band(p_min, p_max, dx, 0.0, p0, p1);